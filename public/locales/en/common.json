{
	"header": {
		"about": "About me",
		"skills": "Skills",
		"projects": "Projects",
		"contact": "Contact me",
		"connect": "Let's connect"
	},
	"hero": {
		"greet": "Hi, I'm",
		"banner": {
			"developer": "Full Stack Developer",
			"engineer": "System Engineer"
		},
		"skills": "I can develop full stack applications with technologies like JavaScript, TypeScript, React, Node, Express, Nest, PostgreSQL or MongoDB",
		"cv": "Download CV"
	},
	"about": {
		"title": "About me",
		"first_p": "My journey into the world of programming began with the first basic programming classes I took in college. At that time, my knowledge of web development and programming was practically nil, to the point that I had the clichéd thought that all programmers were some kind of hacker. In this way, through the C++ language I learned the basic notions of programming, developing small programs that were executed in the console. Subsequently, I began to study HTML, CSS, JavaScript and PHP in order to develop more complex programs with attractive user interfaces to fulfill the assigned projects in the university.",
		"second_p": "Thus, the first project that I carried out as a practice with these technologies consisted of a small repository in order to store and organize information required to help people in a rural area where some relatives live to opt for bonuses provided by the government through a web portal, this being the first time I understood that I wanted to dedicate myself to this profession, since I felt immense satisfaction when I saw that I could develop software that was of some use. Since then I decided to specialize in web development, learning both self-taught and through courses and bootcamps."
	},
	"skills": {
		"title": "Skills",
		"first_p": "In addition to basic programming, at university I learned more advanced programming concepts, such as object-oriented programming, data structures, algorithms, and recursion, along with basic concepts of software engineering, such as the case of the software life cycle, starting from the analysis to the design and implementation of systems. On the other hand, I have finished certain courses like",
		"&": "and",
		"second_p": ", in addition to learning other technologies, frameworks and libraries with free resources such as YouTube or the documentation of said technologies.",
		"second_t": "Main technologies"
	},
	"projects": {
		"title": "Projects",
		"action": "View project",
		"web_access": {
			"desc": "Automatic web accessibility assessment tool and contrast checker"
		},
		"sticky_notes": {
			"desc": "Notes app with internationalization."
		},
		"coroshop": {
			"desc": "E-commerce with Stripe or PayPal payments."
		}
	},
	"contact": {
		"title": "Contact me",
		"form": {
			"f_name": "First name",
			"s_name": "Last name",
			"email": "Email address",
			"message": "Message",
			"send": "Send",
			"success": "Message sent successfully!",
			"fail": "Can not sent message!"
		}
	},
	"footer": {
		"copy": "Copyright by Joan Romero 2022",
		"rights": "All rights reserved"
	},
	"web_access": {
		"desc": "WebAccess is a website that has two tools to help web developers create more accessible content. The first tool is an automatic web accessibility evaluator, which allows evaluating HTML code by inserting the URL of a web page or the HTML code itself, applying up to 13 techniques proposed by the WCAG in its version 2.1. On the other hand, the second tool is a contrast evaluator, which allows knowing if the contrast ratio between two colors (text and background) meets any of the levels established by the WCAG.",
		"visit": "View",
		"stack": {
			"desc": "On the frontend side, I used React as the base framework, managing the state of the application with hooks and with Jotai due to its simplicity to control the state, avoiding unnecessary rerendering and using SASS for the styles. The backend, on the other hand, is made up of an Express server, using a library called Cheerio to analyze HTML code and perform the evaluation, which has a simple api to manipulate the DOM of an HTML document."
		},
		"origin": {
			"title": "Idea origin",
			"desc": "The idea of ​​developing an automatic accessibility evaluation tool arose when I was looking for topics to focus on for my thesis at university. At that time I was learning web development in a self-taught way and I noticed that many times the subject of accessibility was omitted or was dealt with in a very poor and general way, so I decided to focus my thesis on this topic. In this way, I began to investigate automatic accessibility evaluation tools and noticed that it was feasible to make a prototype, so I focused my thesis on its development. This first version was focused on visual disabilities and the graphical interfaces were developed using a library called EJS which allows inserting JavaScript code into HTML. Later, to consolidate the knowledge I acquired of both React and web development in general, I decided to make this second version, improving the quality of the initial prototype."
		},
		"development": {
			"title": "Development process",
			"f_desc": "The first step to develop this project was to analyze and filter the techniques proposed by the WCAG related to HTML and that could be applied with the Cheerio library. Subsequently, I began to develop the backend, made up of a server that has a REST api with a route to evaluate by URL and another to evaluate HTML code directly, in addition to each of the functions that represent the selected WCAG techniques. It is also important to highlight that you perform unit tests on each of the functions that represent a technique, in addition to integration tests on each of the api routes.",
			"s_desc": "As for the frontend, I started by making a preliminary design in Figma, selecting the color palette and the font styles and sizes that I use as a guide to develop the user interface with React and SASS. In this way, the first screens developed were the homepage and the page to select the type of accessibility evaluation. Later, I developed the results screen, in addition to the hooks and the context in charge of handling the status of the request to the api. Finally, develop the contrast evaluation screen as well as the necessary hooks to control its state."
		},
		"challenges": {
			"title": "Challenges during development",
			"desc": "Regarding the backend, the main challenge I found was related to how to perform the functions to apply each WCAG technique with the Cheerio library in the most efficient way possible to avoid long API response times. On the other hand, One of the aspects that cost me the most during the development of the frontend was deciding how to structure some components to avoid re-rendering problems that can arise when using React's Context api to handle state. Finally, it was also a challenge to decide when it was correct to abstract a component in order to reuse its behavior or its styles."
		},
		"learning": {
			"title": "Learning",
			"f_desc": "During the development of the project I learned many important practices. For example, that it will always be better to have simple code, so you should not be obsessed with efficiency in the early stages of the project and you should only abstract functions, modules or components when you notice that the code has been repeated at least three times. Sometimes, since if the opposite of these practices is carried out, there is a tendency to apply over-engineering and write more complex code than necessary.",
			"s_desc": "In addition, I learned to perform unit and integration tests, as well as to better understand the operation of the Context api and rendering in React. Finally, I learned the importance of writing more semantic HTML code, along with other aspects related to web accessibility."
		},
		"projects": {
			"title": "Another projects"
		}
	}
}
