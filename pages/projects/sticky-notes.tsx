import type { NextPage } from 'next';
import Head from 'next/head';
import { BsGithub } from 'react-icons/bs';
import { IoOpen } from 'react-icons/io5';
import { motion } from 'framer-motion';
import Image from 'next/image';
import {
	SiJavascript,
	SiTypescript,
	SiSass,
	SiReact,
	SiNodedotjs,
	SiExpress,
	SiNestjs,
	SiGraphql,
	SiPostgresql,
	SiMongodb,
	SiMaterialui,
	SiStyledcomponents,
	SiRedux,
	SiJest,
	SiPrisma,
} from 'react-icons/si';
import BlurImage from '../../components/BlurImage';
import Link from 'next/link';

const Home: NextPage = () => {
	return (
		<div className="mb-8">
			<Head>
				<title>Joan Romero - Sticky Notes</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className="mx-auto max-w-sm  px-4 sm:max-w-xl md:max-w-2xl lg:max-w-4xl xl:max-w-6xl">
				<div className="min-h-screen pt-24">
					<h3 className="text-xl font-bold text-teal-600 sm:text-2xl md:text-3xl lg:text-4xl">
						Sticky Notes
					</h3>

					<p className="text-md mt-4">
						Sticky Notes es una app de notas que dispone de las funciones
						básicas de crear, editar, archivar y eliminar notas. Ademas, permite
						asignar un color a las notas para categorizarlas y filtrarlas,
						aunado a la capacidad du buscar tanto por titulo como por cuerpo de
						la nota. Finalmente, la aplicación cuenta con un sistema de
						autenticación básico basado JWT.
					</p>

					<div className="mt-6 flex w-full justify-center">
						<motion.a
							initial={{
								x: 200,
								opacity: 0,
								scale: 0.5,
							}}
							animate={{
								x: 0,
								opacity: 1,
								scale: 1,
							}}
							transition={{
								duration: 1.5,
							}}
							href="https://github.com/JoanR99/web-access-server"
							target="_blank"
							rel="noopener noreferrer"
							className="mr-4 flex flex-col items-center justify-center"
						>
							<BsGithub className="h-6 w-6 text-pink-700 hover:scale-105 hover:opacity-90 sm:h-7 sm:w-7" />
							Backend
						</motion.a>
						<motion.a
							initial={{
								x: 200,
								opacity: 0,
								scale: 0.5,
							}}
							animate={{
								x: 0,
								opacity: 1,
								scale: 1,
							}}
							transition={{
								duration: 1.5,
							}}
							href="https://github.com/JoanR99/web-access-client"
							target="_blank"
							rel="noopener noreferrer"
							className="mr-4 flex flex-col items-center justify-center"
						>
							<BsGithub className="h-6 w-6 text-pink-700  hover:scale-105 hover:opacity-90 sm:h-7 sm:w-7" />
							Frontend
						</motion.a>
						<motion.a
							initial={{
								x: 200,
								opacity: 0,
								scale: 0.5,
							}}
							animate={{
								x: 0,
								opacity: 1,
								scale: 1,
							}}
							transition={{
								duration: 1.5,
							}}
							href="https://web-access.vercel.app/"
							target="_blank"
							rel="noopener noreferrer"
							className="mr-4 flex flex-col items-center justify-center"
						>
							<IoOpen className="h-6 w-6 text-pink-700  hover:scale-105 hover:opacity-90 sm:h-7 sm:w-7" />
							Visitar
						</motion.a>
					</div>

					<div className="mt-8 grid w-full grid-cols-1 lg:mt-10 lg:grid-cols-2 lg:items-center lg:gap-x-10">
						<motion.div
							initial={{
								opacity: 0,
								scale: 0.5,
							}}
							whileInView={{
								opacity: 1,
								scale: 1,
							}}
							transition={{
								duration: 1.5,
							}}
							className="m-2 h-fit w-full rounded-xl shadow-lg shadow-gray-400 lg:order-2"
						>
							<Image
								src="/images/web-access-frame.png"
								alt="web-access"
								width={2000}
								height={1400}
								className="rounded-xl"
							/>
						</motion.div>

						<div className="mt-8 flex h-fit flex-col lg:mt-0">
							<div>
								<h4 className="text-xl font-bold text-teal-700">Stack</h4>
								<div className="mt-4 flex w-fit">
									<SiTypescript className='sm:w-8" mr-4 h-6 w-6 text-sky-600 sm:h-8' />
									<SiReact className='sm:w-8" mr-4 h-6 w-6 text-sky-600 sm:h-8' />
									<SiMaterialui className='sm:w-8" mr-4 h-6 w-6 text-sky-600 sm:h-8' />
									<SiNodedotjs className='sm:w-8" mr-4 h-6 w-6 text-lime-700 sm:h-8' />
									<SiExpress className='sm:w-8" mr-4 h-6 w-6 text-lime-700 sm:h-8' />
									<SiPrisma className='sm:w-8" mr-4 h-6 w-6 text-blue-900 sm:h-8' />
									<SiPostgresql className='sm:w-8" mr-4 h-6 w-6 text-sky-600 sm:h-8' />
									<SiJest className='sm:w-8" mr-4 h-6 w-6 text-red-800 sm:h-8' />
								</div>
								<p className="text-md mt-4">
									Toda la aplicación fue escrita en TypeScript, debido a las
									ventajas que ofrece el tener código fuertemente tipado, como
									es el caso de la prevención de errores durante el desarrollo.
									En el lado del frontend utilice React como framework base,
									utilizando principalmente React-Query para manejar el estado
									de la aplicación, ya que esta librería facilita la
									coordinación y sincronización del estado o cache del servidor,
									el cual conforma la mayor parte del estado de la aplicación,
									ademas de hooks para manejar el estado restante. Para los
									estilos utilice la librería Material UI, debido a que provee
									componentes básicos personalizables que facilitan crear una
									interfaz de usuario atractiva y profesional en menor tiempo.
								</p>
								<p className="text-md mt-2">
									El backend por su parte, esta conformado por un servidor en
									Express, debido a su facilidad y flexibilidad para crear una
									api REST, ademas de PostgreSQL como base de datos, ya que es
									una de las bases de datos relacionales mas robustas y con
									mayor soporte en cuanto a su despliegue. Finalmente, utilice
									Prisma como ORM, ya que ofrece un CLI poderoso y trabaja con
									TypesCript de forma predeterminada, lo que facilita crear
									servicios con una buena seguridad de tipado.
								</p>
							</div>
						</div>
					</div>

					<div className="my-8 grid w-full grid-cols-1 lg:mt-10 lg:grid-cols-2 lg:items-center lg:gap-x-10">
						<motion.div
							initial={{
								opacity: 0,
								scale: 0.5,
							}}
							whileInView={{
								opacity: 1,
								scale: 1,
							}}
							transition={{
								duration: 1.5,
							}}
							className="m-2 h-fit w-full rounded-xl shadow-lg shadow-gray-400"
						>
							<Image
								src="/images/web-access-frame.png"
								alt="web-access"
								width={2000}
								height={1400}
								className="rounded-xl"
							/>
						</motion.div>

						<div className="mt-8 h-fit">
							<h4 className="text-xl font-bold text-teal-700">
								Origen de la Idea
							</h4>
							<p className="text-md mt-4">
								La idea de desarrollar Sticky Notes surge para aprovechar una
								aplicación de notas mucho mas básica que había realizado como
								parte de una prueba técnica con el fin de practicar y consolidar
								los conocimientos que había adquirido de tecnologías como
								TypeScript, React-Query o Prisma. La aplicación original estaba
								escrita en JavaScript, utilizando Sequelize como ORM y Bootstrap
								para estilar la interfaz de usuario. Ademas, es importante
								señalar que la aplicación original tampoco contaba con un
								sistema de autenticación.
							</p>
						</div>
					</div>

					<div className="my-8 grid w-full grid-cols-1 lg:mt-10 lg:grid-cols-2 lg:items-center lg:gap-x-10">
						<motion.div
							initial={{
								opacity: 0,
								scale: 0.5,
							}}
							whileInView={{
								opacity: 1,
								scale: 1,
							}}
							transition={{
								duration: 1.5,
							}}
							className="m-2 h-fit w-full rounded-xl shadow-lg shadow-gray-400 lg:order-2 lg:mt-6"
						>
							<Image
								src="/images/web-access-frame.png"
								alt="web-access"
								width={2000}
								height={1400}
								className="rounded-xl"
							/>
						</motion.div>

						<div className="my-8 h-fit lg:col-span-2 lg:mb-4">
							<h4 className="text-xl font-bold text-teal-700">
								Proceso de Desarrollo
							</h4>
							<p className="text-md mt-4">
								Para desarrollar la primera version comencé por diseñar la base
								de datos definiendo la tabla de notas, mientras que no fue
								necesario realizar un diseño preliminar para la interfaz de
								usuario debido a que la en la prueba técnica ya estaba definida.
							</p>
							<p className="text-md mt-2">
								Posteriormente, para iniciar con la segunda version comencé por
								migrar el código del backend a TypeScript para después redilear
								la base de datos para agregar las tablas necesarias para las
								funciones de autenticación y clasificar por color. Los últimos
								pasos en cuanto al backend fueron migrar de Sequelize a Prisma
								como ORM y agregar o modificar los controlados y servicios
								necesarios para implementar las nuevas funciones.
							</p>
							<p className="text-md mt-2">
								En el caso del frontend comencé por migrar el código a
								TypeScript y cambiar algunos componentes para migrar de
								Bootstrap a Material UI para los estilos y los componentes
								interactivos como las ventanas modales. Finalmente, modifique y
								agregue algunos componentes para implementar las funciones de
								autenticación, filtrado por color y búsqueda.
							</p>
						</div>

						<motion.div
							initial={{
								opacity: 0,
								scale: 0.5,
							}}
							whileInView={{
								opacity: 1,
								scale: 1,
							}}
							transition={{
								duration: 1.5,
							}}
							className="m-2 mt-2 h-fit w-full rounded-xl shadow-lg shadow-gray-400 lg:order-3 lg:mt-6"
						>
							<Image
								src="/images/web-access-frame.png"
								alt="web-access"
								width={2000}
								height={1400}
								className="rounded-xl"
							/>
						</motion.div>
					</div>

					<div className="my-8 lg:mt-10">
						<div className="h-fit lg:col-span-2">
							<h4 className="text-xl font-bold text-teal-700">
								Desafíos Durante el Desarrollo
							</h4>
							<p className="text-md mt-4">
								Uno de los mayores retos en cuanto a la aplicación en general
								fue el tipado con TypeScript en cuanto a las utilidades de
								librerías de terceros.
							</p>
							<p className="text-md mt-2">
								En cuanto al backend, lo que mas se me complico fue configurar
								Jest para trabajar con TypeScript, ademas de configurar Prisma
								para utilizar una base de datos de prueba al realizar los test
								de integración y End to End.
							</p>
							<p className="text-md mt-2">
								Por su parte, el mayor reto en el frontend fue aplicar el
								sistema de refrescamiento de token en cuanto a la autenticación
								con React-Query, ya que se debe enviar una nueva petición al
								servidor para obtener un nuevo token de acceso cada vez que una
								petición se realizara con un token de acceso expirado, ademas de
								configurar React-Query y estructurar la app para evitar que esta
								librería realizara varias peticiones repetidas a la api por
								rerenderizaciones de componentes.
							</p>
						</div>
					</div>

					<div className="my-8 grid w-full grid-cols-1 lg:mt-10 lg:grid-cols-2 lg:items-center lg:gap-x-10">
						<motion.div
							initial={{
								opacity: 0,
								scale: 0.5,
							}}
							whileInView={{
								opacity: 1,
								scale: 1,
							}}
							transition={{
								duration: 1.5,
							}}
							className="m-2 h-fit w-full rounded-xl shadow-lg shadow-gray-400 lg:order-2"
						>
							<Image
								src="/images/web-access-frame.png"
								alt="web-access"
								width={2000}
								height={1400}
								className="rounded-xl"
							/>
						</motion.div>

						<div className="mt-8 flex h-fit flex-col">
							<div>
								<h4 className="text-xl font-bold text-teal-700">Aprendizaje</h4>
								<p className="text-md mt-4">
									Durante el desarrollo del proyecto aprendí muchos conceptos
									importantes, como por ejemplo, aplicar un sistema de
									autenticación con tokens de refrescamiento y de acceso, ademas
									de comprender de mejor forma la diferencia entre el estado de
									la aplicación y del estado o cache del servidor y como este
									ultimo puede ser manejado y sincronizado con mayor facilidad
									con librerías especializadas en ese aspecto como es el caso de
									React-Query.
								</p>

								<p className="text-md mt-2">
									Finalmente, mejore mi capacidad para configurar y sincronizar
									utilidades de librerías de terceros, sumado a toda la
									experiencia que obtuve con TypeScript.
								</p>
							</div>
						</div>
					</div>
				</div>
				<div className=" mt-24">
					<h4 className="text-xl font-bold text-teal-700">Otros Proyectos</h4>
					<div className="mt-8 grid w-full grid-cols-1 gap-6 md:gap-8">
						<motion.article
							initial={{
								opacity: 0,
								scale: 0.5,
							}}
							whileInView={{
								opacity: 1,
								scale: 1,
							}}
							transition={{
								duration: 1.5,
							}}
							className="grid grid-cols-1 gap-6 rounded-xl border border-solid p-2 shadow-xl md:grid-cols-2"
						>
							<BlurImage src="/images/web-access.png" alt="WebAcess" />

							<div className="flex flex-col items-center justify-between p-4 md:items-start">
								<h3 className="text-md font-medium text-teal-700">WebAccess</h3>
								<p className="mt-2 text-center text-sm md:text-left">
									Herramienta de evaluación automática de accesibilidad web y
									evaluador de contraste.
								</p>
								<div className="mt-4 flex">
									<SiJavascript className='sm:w-8" mr-4 h-6 w-6 text-yellow-400 sm:h-8' />
									<SiReact className='sm:w-8" mr-4 h-6 w-6 text-sky-600 sm:h-8' />
									<SiSass className='sm:w-8" mr-4 h-6 w-6 text-pink-700 sm:h-8' />
									<SiNodedotjs className='sm:w-8" mr-4 h-6 w-6 text-lime-700 sm:h-8' />
									<SiExpress className='sm:w-8" mr-4 h-6 w-6 text-lime-700 sm:h-8' />
									<SiJest className='sm:w-8" mr-4 h-6 w-6 text-red-800 sm:h-8' />
								</div>
								<Link href="/projects/WebAccess">
									<p className="mt-4 cursor-pointer text-sm font-medium text-pink-700">
										Ver Proyecto
									</p>
								</Link>
							</div>
						</motion.article>

						<motion.article
							initial={{
								opacity: 0,
								scale: 0.5,
							}}
							whileInView={{
								opacity: 1,
								scale: 1,
							}}
							transition={{
								duration: 1.5,
							}}
							className="grid grid-cols-1 gap-4 rounded-xl border border-solid shadow-xl md:grid-cols-2"
						>
							<BlurImage src="/images/web-access.png" alt="WebAcess" />

							<div className="flex flex-col items-center justify-between p-4 md:items-start">
								<h3 className="text-md font-medium text-teal-700">Coroshop</h3>
								<p className="mt-2 text-center text-sm md:text-left">
									E-commerce.
								</p>
								<div className="mt-4 flex flex-wrap justify-center">
									<SiTypescript className='sm:w-8" mr-4 h-6 w-6 text-sky-600 sm:h-8' />
									<SiReact className='sm:w-8" mr-4 h-6 w-6 text-sky-600 sm:h-8' />
									<SiRedux className='sm:w-8" mr-4 h-6 w-6 text-purple-700 sm:h-8' />
									<SiStyledcomponents className='sm:w-8" mr-4 h-12 w-12 text-pink-700 sm:h-8' />
									<SiNodedotjs className='sm:w-8" mr-4 h-6 w-6 text-lime-700 sm:h-8' />
									<SiNestjs className='sm:w-8" mr-4 h-6 w-6 text-red-700 sm:h-8' />
									<SiGraphql className='sm:w-8" mr-4 h-6 w-6 text-pink-700 sm:h-8' />
									<SiMongodb className='sm:w-8" mr-4 h-6 w-6 text-green-700 sm:h-8' />
									<SiJest className='sm:w-8" mr-4 h-6 w-6 text-red-800 sm:h-8' />
								</div>
								<Link href="/projects/coroshop">
									<p className="mt-4 cursor-pointer text-sm font-medium text-pink-700">
										Ver Proyecto
									</p>
								</Link>
							</div>
						</motion.article>
					</div>
				</div>
			</div>
		</div>
	);
};

export default Home;
