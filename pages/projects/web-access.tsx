import type { NextPage } from 'next';
import Head from 'next/head';
import { BsGithub } from 'react-icons/bs';
import Image from 'next/image';
import {
	SiJavascript,
	SiSass,
	SiReact,
	SiNodedotjs,
	SiExpress,
	SiJest,
} from 'react-icons/si';
import GithubButton from '../../components/GithubButton';
import VisitButton from '../../components/VisitButton';
import ImageContainer from '../../components/ImageContainer';
import StickyNotesCard from '../../components/StickyNotesCard';
import CoroshopCard from '../../components/CoroshopCard';

const Home: NextPage = () => {
	return (
		<div className="mb-8">
			<Head>
				<title>Joan Romero - WebAccess</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className="mx-auto max-w-sm  px-4 sm:max-w-xl md:max-w-2xl lg:max-w-4xl xl:max-w-6xl">
				<div className="min-h-screen pt-24">
					<h3 className="text-xl font-bold text-teal-600 sm:text-2xl md:text-3xl lg:text-4xl">
						WebAccess
					</h3>

					<p className="text-md mt-4">
						WebAccess es un sitio web que dispone de dos herramientas con el fin
						de ayudar a los desarrolladores web a crear contenido más accesible.
						La primera herramienta se trata de un evaluador automático de
						accesibilidad web, el cual permite evaluar código HTML insertando el
						URL de una página web o el propio código HTML, aplicando hasta 13
						técnicas propuestas por la WCAG en su versión 2.1. Por otro lado, la
						segunda herramienta se trata de un evaluador de contraste, el cual
						permite conocer si la ratio de contraste entre dos colores (texto y
						fondo) cumple con alguno de los niveles establecidos por la WCAG.
					</p>

					<div className="mt-6 flex w-full justify-center">
						<GithubButton href="https://github.com/JoanR99/web-access-server">
							Backend
						</GithubButton>
						<GithubButton href="https://github.com/JoanR99/web-access-client">
							Frontend
						</GithubButton>
						<VisitButton href="https://web-access.vercel.app/">
							Visitar
						</VisitButton>
					</div>

					<div className="mt-8 grid w-full grid-cols-1 lg:mt-10 lg:grid-cols-2 lg:items-center lg:gap-x-10">
						<ImageContainer className="m-2 h-fit w-full rounded-xl shadow-lg shadow-gray-400 lg:order-2">
							<Image
								src="/images/web-access-frame.png"
								alt="WebAccess"
								width={2000}
								height={1400}
								className="rounded-xl"
							/>
						</ImageContainer>

						<div className="mt-8 flex h-fit flex-col lg:mt-0">
							<div>
								<h4 className="text-xl font-bold text-teal-700">Stack</h4>
								<div className="mt-4 flex w-fit">
									<SiJavascript className='sm:w-10" mr-4 h-6 w-6 text-yellow-400 sm:h-10' />
									<SiReact className='sm:w-10" mr-4 h-6 w-6 text-sky-600 sm:h-10' />
									<SiSass className='sm:w-10" mr-4 h-6 w-6 text-pink-700 sm:h-10' />
									<SiNodedotjs className='sm:w-10" mr-4 h-6 w-6 text-lime-700 sm:h-10' />
									<SiExpress className='sm:w-10" mr-4 h-6 w-6 text-lime-700 sm:h-10' />
									<SiJest className='sm:w-10" h-6 w-6 text-red-800 sm:h-10' />
								</div>
								<p className="text-md mt-4">
									En el lado del frontend utilice React como framework base,
									manejando el estado de la aplicación con custom hooks debido a
									la simplicidad del mismo y utilizando SASS para los estilos.
									El backend por su parte, esta conformado por un servidor en
									Express, utilizando para analizar código HTML y realizar la
									evaluación una librería llamada Cheerio, la cual dispone de
									una api sencilla para manipular el DOM de un documento HTML.
								</p>
							</div>
						</div>
					</div>

					<div className="my-8 grid w-full grid-cols-1 lg:mt-10 lg:grid-cols-2 lg:items-center lg:gap-x-10">
						<ImageContainer className="m-2 h-fit w-full rounded-xl shadow-lg shadow-gray-400">
							<Image
								src="/images/wa-2.png"
								alt="WebAccess - Section"
								width={2000}
								height={1400}
								className="rounded-xl"
							/>
						</ImageContainer>

						<div className="mt-8 h-fit">
							<h4 className="text-xl font-bold text-teal-700">
								Origen de la Idea
							</h4>
							<p className="text-md mt-4">
								La idea de desarrollar una herramienta de evaluación automática
								de accesibilidad surge cuando estaba buscando temas en los que
								centrarme para realizar la tesis de grado en la universidad.
								Para ese momento estaba aprendiendo desarrollo web de forma
								autodidacta y note que muchas veces se omitía el tema de la
								accesibilidad o se tocaba de forma muy pobre y general, por lo
								que decidí centrar mi tesis en esta temática. De esta manera,
								comencé a investigar sobre herramientas de evaluación automática
								de accesibilidad y note que si era factible realizar un
								prototipo, por lo que centre mi tesis en el desarrollo del
								mismo. Esta primera versión estaba centrada en discapacidades
								visuales y las interfaces gráficas fueron desarrolladas
								utilizando una librería llamada EJS la cual permite insertar
								código JavaScript en HTML. Posteriormente, para consolidar los
								conocimientos que adquirí tanto de React como de desarrollo web
								en general decidí realizar esta segunda versión, mejorando la
								calidad del prototipo inicial.
							</p>
						</div>
					</div>

					<div className="my-8 grid w-full grid-cols-1 lg:mt-10 lg:grid-cols-2 lg:items-center lg:gap-x-10">
						<ImageContainer className="m-2 h-fit w-full rounded-xl shadow-lg shadow-gray-400 lg:order-2 lg:mt-6">
							<Image
								src="/images/wa-3.png"
								alt="WebAccess - Accessibility evaluation"
								width={2000}
								height={1400}
								className="rounded-xl"
							/>
						</ImageContainer>

						<div className="my-8 h-fit lg:col-span-2 lg:mb-4">
							<h4 className="text-xl font-bold text-teal-700">
								Proceso de Desarrollo
							</h4>
							<p className="text-md mt-4">
								El primer paso para desarrollar este proyecto fue analizar y
								filtrar las técnicas propuestas por la WCAG relacionadas a HTML
								y que pudieran ser aplicadas con la librería Cheerio.
								Posteriormente, comencé a desarrollar el backend, conformado por
								un servidor que dispone de una api REST con una ruta para
								evaluar por URL y otra para evaluar código HTML directamente,
								ademas de cada una de las funciones que representan las técnicas
								de la WCAG seleccionadas. También es importante resaltar que
								realice pruebas unitarias a cada una de las funciones que
								representan una técnica, ademas de pruebas de integración a cada
								una de las rutas de la api.
							</p>
							<p className="text-md mt-2">
								En cuanto al frontend, comencé realizando un diseño preliminar
								en Figma, seleccionando la paleta de colores y los estilos y
								tamaños de la fuente que utilice como guía para desarrollar la
								interfaz de usuario con React y SASS. De esta manera, las
								primeras pantallas desarrolladas fueron la homepage y la pagina
								para seleccionar el tipo de evaluación de accesibilidad.
								Posteriormente, desarrolle la pantalla de resultados, ademas de
								los hooks y el context encargados de manejar el estado de la
								petición a la api. Finalmente, desarrolle la pantalla de
								evaluación de contraste ademas de los hooks necesarios para
								controlar su estado.
							</p>
						</div>

						<ImageContainer className="m-2 mt-2 h-fit w-full rounded-xl shadow-lg shadow-gray-400 lg:order-3 lg:mt-6">
							<Image
								src="/images/wa-4.png"
								alt="WebAccess - Results"
								width={2000}
								height={1400}
								className="rounded-xl"
							/>
						</ImageContainer>
					</div>

					<div className="my-8 lg:mt-10">
						<div className="h-fit lg:col-span-2">
							<h4 className="text-xl font-bold text-teal-700">
								Desafíos Durante el Desarrollo
							</h4>
							<p className="text-md mt-4">
								En cuanto al backend, el principal reto que encontré estaba
								relacionado a como realizar las funciones para aplicar cada
								técnica de la WCAG con la librería Cheerio de la forma mas
								eficiente posible para asi evitar que los tiempos de respuesta
								de la api fueran muy extensos. Por otro lado, Uno de los
								aspectos que mas me costo durante el desarrollo del frontend fue
								decidir como estructurar algunos componentes para evitar los
								problemas de re-renderizado que pueden surgir al usar la api
								Context de React para manejar el estado. Finalmente, también fue
								un reto el decidir cuando era correcto abstraer un componente
								con el fin de reutilizar su funcionamiento o sus estilos.
							</p>
						</div>
					</div>

					<div className="my-8 grid w-full grid-cols-1 lg:mt-10 lg:grid-cols-2 lg:items-center lg:gap-x-10">
						<ImageContainer className="m-2 h-fit w-full rounded-xl shadow-lg shadow-gray-400 lg:order-2">
							<Image
								src="/images/wa-5.png"
								alt="WebAccess - Contrast checker"
								width={2000}
								height={1400}
								className="rounded-xl"
							/>
						</ImageContainer>

						<div className="mt-8 flex h-fit flex-col">
							<div>
								<h4 className="text-xl font-bold text-teal-700">Aprendizaje</h4>
								<p className="text-md mt-4">
									Durante el desarrollo del proyecto aprendí muchas practicas
									importantes. Por ejemplo, que siempre va a ser mejor tener
									código simple, por lo que no hay que obsesionarse con la
									eficiencia en etapas tempranas del proyecto y solo se deben
									abstraer funciones, módulos o componentes cuando se note que
									el código se ha repetido al menos tres veces, ya que si se
									realiza lo contrario a estas practicas, se tiende a aplicar
									sobreingenieria y a escribir código mas complejo del
									necesario.
								</p>

								<p className="text-md mt-2">
									Ademas, aprendí a realizar pruebas unitarias y de integración,
									asi como comprender de mejor forma el funcionamiento de la api
									Context y del renderizado en React. Finalmente, aprendí la
									importancia de escribir código HTML mas semántico, aunado a
									otros aspectos relacionados a la accesibilidad web.
								</p>
							</div>
						</div>
					</div>
				</div>
				<div className=" mt-24">
					<h4 className="text-xl font-bold text-teal-700">Otros Proyectos</h4>
					<div className="mt-8 grid w-full grid-cols-1 gap-6 md:gap-8">
						<StickyNotesCard />

						<CoroshopCard />
					</div>
				</div>
			</div>
		</div>
	);
};

export default Home;
